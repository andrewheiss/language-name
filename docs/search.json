[
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "Examples",
    "section": "",
    "text": "To install this extension in your current directory (or into the Quarto project that you‚Äôre currently working in), use the following terminal command:\n\n\nquarto add andrewheiss/language-name\n\nThis will install the extension in the _extensions subdirectory. If you‚Äôre using version control, you will want to check in this directory."
  },
  {
    "objectID": "example.html#installation",
    "href": "example.html#installation",
    "title": "Examples",
    "section": "",
    "text": "To install this extension in your current directory (or into the Quarto project that you‚Äôre currently working in), use the following terminal command:\n\n\nquarto add andrewheiss/language-name\n\nThis will install the extension in the _extensions subdirectory. If you‚Äôre using version control, you will want to check in this directory."
  },
  {
    "objectID": "example.html#enabling-the-extension",
    "href": "example.html#enabling-the-extension",
    "title": "Examples",
    "section": "Enabling the extension",
    "text": "Enabling the extension\nEnable the filter by including it in the YAML front matter:\n\n\n---\ntitle: Your title\nfilters:\n  - language-name\n---"
  },
  {
    "objectID": "example.html#control-when-language-names-are-visible",
    "href": "example.html#control-when-language-names-are-visible",
    "title": "Examples",
    "section": "Control when language names are visible",
    "text": "Control when language names are visible\n\nDocument-wide\nBy default, the language name will be added to all language-specific blocks in the document. You can disable this with the show-all option in the YAML front matter:\n\n\n---\ntitle: Your title\nfilters:\n  - language-name\nlanguage-name:\n  show-all: false\n---\n\n\n\nIn specific blocks\nYou can also enable or disable language names on a block-by-block basis with the show-language attribute, which can be either true or false. For instance:\n\nSourceOutput\n\n\n```{.r show-language=\"false\"}\n# No language name\nx &lt;- 1 + 1\n```\n\n\n# No language name\nx &lt;- 1 + 1\n\n\n\n\nSourceOutput\n\n\n```{.r show-language=\"true\"}\n# Language name!\nx &lt;- 1 + 1\n```\n\n\n\n\n# Language name!\nx &lt;- 1 + 1"
  },
  {
    "objectID": "example.html#control-language-name",
    "href": "example.html#control-language-name",
    "title": "Examples",
    "section": "Control language name",
    "text": "Control language name\nBy default, the language will be converted to sentence case (i.e.¬†first letter capitalized). This works for many languages, like R and Python. For example, this Python chunk renders with a title of ‚ÄúPython‚Äù:\n\nSourceOutput\n\n\n```{.python}\nx = 1 + 1\n```\n\n\n\n\nx = 1 + 1\n\n\n\n\nFor languages like YAML, though, the name will render as ‚ÄúYaml‚Äù:\n\n\nitems:\n  - thing 1\n  - thing 2\n\nYou can control the text for the language name with the language-title option:\n\nSourceOutput\n\n\n```{.yaml language-title=\"YAML\"}\nitems:\n  - thing 1\n  - thing 2\n```\n\n\n\n\nitems:\n  - thing 1\n  - thing 2\n\n\n\n\nYou can use whatever you want in the language-title option, like adding emojis or extra language details:\n\nOutputSource\n\n\n\n\nx = 1 + 1\n\n\n\nprint x\n\n\n\nprint(x)\n\n\n\n```{.python language-title=\"üêç Python (both 2 and 3)\"}\nx = 1 + 1\n```\n\n```{.python language-title=\"Python 2\"}\nprint x\n```\n\n```{.python language-title=\"Python 3\"}\nprint(x)\n```\n\n\n\nHere are some other examples:\n\nOutputSource\n\n\n\n\nquarto preview document.qmd --no-browser\n\n\n\n```{.bash language-title=\"Terminal (sh)\"}\nquarto preview document.qmd --no-browser\n```\n\n\n\n\nOutputSource\n\n\n\n\nreg y x, robust\n\n\n\n```{.stata language-title=\"Stata ($$$)\"}\nreg y x, robust\n```"
  },
  {
    "objectID": "example.html#computational-output",
    "href": "example.html#computational-output",
    "title": "Examples",
    "section": "Computational output",
    "text": "Computational output\nThis also works with computational cells:\n\n\n\nmean(1:5)\n\n\n[1] 3\n\n\nYou can control options within computational cells as well using inline attributes. Here‚Äôs a custom language name:\n\nOutputSource\n\n\n\n\n\nmean(1:5)\n\n\n[1] 3\n\n\n\n\n```{r}\n#| language-title: \"R (the best)\"\n\nmean(1:5)\n```\n\n\n\nAnd here‚Äôs a chunk with no language name:\n\nOutputSource\n\n\n\nmean(1:5)\n\n[1] 3\n\n\n\n\n```{r}\n#| show-language: false\n\nmean(1:5)\n```\n\n\n\nIt also works when using the filename attribute:\n\nOutputSource\n\n\n\n\n\n\n\nanalysis.R\n\nmean(1:5)\n\n\n\n[1] 3\n\n\n\n\n```{r}\n#| language-title: \"R (the best)\"\n#| filename: \"analysis.R\"\n\nmean(1:5)\n```"
  },
  {
    "objectID": "example.html#adaptive-color",
    "href": "example.html#adaptive-color",
    "title": "Examples",
    "section": "Adaptive color",
    "text": "Adaptive color\nThe color of the language title and little border line should automatically adapt to whatever highlighting color scheme you‚Äôre using. It‚Äôs set to be at 80% opacity of the CSS variable --quarto-hl-co-color, which is used for code comments and code annotations and the copy button in code output.\nTry toggling from dark to light mode to check: Switch between light/dark mode\n\n\n# The language name should be the same as this color\nx &lt;- mean(1:5)"
  },
  {
    "objectID": "example.html#custom-colors",
    "href": "example.html#custom-colors",
    "title": "Examples",
    "section": "Custom colors",
    "text": "Custom colors\nIf you want to define your own colors, you can either (1) edit language-name.css in the extension folder directly or (2) you can add your own custom CSS in a separate file or injected through the include-in-header option in the YAML front matter.\nThe relevant CSS settings are at the end:\n\n\n.codeblock-with-label pre::before {\n  /* Other stuff */\n\n  /* Color stuff. This uses a semi transparent version of Quarto's comment color \n  for syntax highlighting (--quarto-hl-co-color) */\n  opacity: 0.8;\n  color: var(--quarto-hl-co-color, #5E5E5E);\n  border-bottom-color: var(--quarto-hl-co-color, #5E5E5E);\n}\n\nSo you could, for instance, do this in a document:\n\n\n---\ntitle: Your title\nfilters:\n  - language-name\nformat:\n  html:\n    include-in-header:\n      - text: |\n          &lt;style type=\"text/css\"&gt;\n          .codeblock-with-label pre::before {\n            color: red;\n            border-bottom-color: green;\n          }\n          &lt;/style&gt;\n---"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto language name",
    "section": "",
    "text": "In multilingual (programming languages; not human languages) Quarto documents, there‚Äôs no easy way to indicate what language code is in. You can describe it with text and comments:\nHere‚Äôs some R code:\n# This is R!\n# (some people like the = instead of the &lt;-)\nx = 1 + 1\nAnd here‚Äôs some Python code:\n# This is Python!\nx = 1 + 1\nBut the reader has to read the preceding text and check the comments. With things like Observable JS, it‚Äôs easy to have a document (like this) that works with R or Python, makes an R or Python object available to Observable, and then plots it with Observable Plot. Within the document, however, all the languages will look the same‚Äîthey‚Äôll be syntax-highlighted correctly according to each language, but there won‚Äôt be a clear signal of what each code chunk is.\nThe Tabby Quarto extension makes it easy to place multilingual chunks of code side-by-side as panels in a tabset, but that‚Äôs mostly for showing the same code across multiple languages and won‚Äôt work well in a document that mixes languages throughout.\nThis extension uses CSS pseudo-classes to add the name of the language to HTML code blocks:\n\n  \n\nYou can customize the language too, like specifying version names or flavors of Javascript:"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Quarto language name",
    "section": "",
    "text": "In multilingual (programming languages; not human languages) Quarto documents, there‚Äôs no easy way to indicate what language code is in. You can describe it with text and comments:\nHere‚Äôs some R code:\n# This is R!\n# (some people like the = instead of the &lt;-)\nx = 1 + 1\nAnd here‚Äôs some Python code:\n# This is Python!\nx = 1 + 1\nBut the reader has to read the preceding text and check the comments. With things like Observable JS, it‚Äôs easy to have a document (like this) that works with R or Python, makes an R or Python object available to Observable, and then plots it with Observable Plot. Within the document, however, all the languages will look the same‚Äîthey‚Äôll be syntax-highlighted correctly according to each language, but there won‚Äôt be a clear signal of what each code chunk is.\nThe Tabby Quarto extension makes it easy to place multilingual chunks of code side-by-side as panels in a tabset, but that‚Äôs mostly for showing the same code across multiple languages and won‚Äôt work well in a document that mixes languages throughout.\nThis extension uses CSS pseudo-classes to add the name of the language to HTML code blocks:\n\n  \n\nYou can customize the language too, like specifying version names or flavors of Javascript:"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Quarto language name",
    "section": "Installation",
    "text": "Installation\nTo install this extension in your current directory (or into the Quarto project that you‚Äôre currently working in), use the following terminal command:\nquarto add andrewheiss/language-name\nThis will install the extension in the _extensions subdirectory. If you‚Äôre using version control, you will want to check in this directory."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Quarto language name",
    "section": "Usage",
    "text": "Usage\n‚≠ê‚ú®‚≠ê See this page for full examples! GitHub doesn‚Äôt allow for custom CSS, so nothing will be visible there. ‚≠ê‚ú®‚≠ê\nEnable the filter by including it in the YAML front matter of a document:\n---\ntitle: Your title\nfilters:\n  - language-name\n---\nBy default, the language name will be added to all language-specific blocks in the document. You can disable this with the show-all option in the YAML front matter:\n---\ntitle: Your title\nfilters:\n  - language-name\nlanguage-name:\n  show-all: false\n---\nYou can control whether a name appears within each block of code with the show-language option:\n```{.r show-language=\"false\"}\n# No language name\nx &lt;- 1 + 1\n```\n```{.r show-language=\"true\"}\n# Yes language name\nx &lt;- 1 + 1\n```\nYou can control the text that appears in with the language-title option:\n```{.sh language-title=\"Terminal (sh)\"}\n$ ls\n```\nIt works with computational chunks too, but the options have to be defined in the chunk options:\n\n```{r}\n#| show-language: true\n#| language-title: \"R (the best)\"\n\nmean(1:5)\n```\n\n[1] 3"
  },
  {
    "objectID": "index.html#todo-some-day",
    "href": "index.html#todo-some-day",
    "title": "Quarto language name",
    "section": "TODO some day!",
    "text": "TODO some day!\n\nRight now this only works with HTML output. It would be neat if it worked in other formats (PDF, Typst, Word lol) like Quarto‚Äôs native code filename option or the icons in callout blocks.\nRight now you have to set a custom title for each chunk that uses it. If your whole document only uses R and Observable, you have to add language-title=\"Observable JS\" to each chunk yourself. It would be cool to have more global custom title settings that you could change up in the document YAML."
  }
]